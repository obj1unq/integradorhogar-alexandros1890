import habitaciones.*

describe "test"{


//*********** OBJETOS PUNTO 1 *************

//una persona de 37 años sin habilidades de cocina (para el ultimo punto del examen es Sencillo)
//TODO: Usar valores defaults! 
	var leo =new Persona(duenioDe = #{}, edad = 37, buenCocinero = false,estaEn=null)

//una persona de 29 anios con habilidades de cocina (para el ultimo punto del examen es Obsesiva)
	var andrea =new Persona(duenioDe = #{}, edad = 29, buenCocinero = true,estaEn=null)

//una persona de 3 anios sin habilidades de cocina (para el ultimo punto del examen es Golosa)
	var milena =new Persona(duenioDe = #{}, edad = 3, buenCocinero = false,estaEn=null)

//TODO: el confort no debería ser seteado desde afuera de la clase porque es una regla de negocio
//una habitacion de uso general
	var comedor =new General(confort=10)

//un banio	
	var banioPrincipal = new Banio(confort=10)
	
//un dormitorio cuyos duenios son andrea y leo
	var dormitorioMatrimonial=new Dormitorio(duenios = #{andrea,leo})

//una cocina de 10 metros cuadrados
	var cocinaPlantaBaja = new Cocina(m2 = 10)	



//***********OBJETOS TEST PUNTO 2****************/
	
	
		//Un banio con un ocupante: milena 
		var banioConMenor =new Banio(confort=10,ocupantes=#{milena})
		
		//Un banio con un ocupante: andrea 
		var banioConMayor =new Banio(confort=10,ocupantes=#{andrea})

		//un dormitorio con dos ocupantes: ley y andrea. Los duenios son leo y andrea. 
		var dormitorioMatrimonialOcupado=new Dormitorio(duenios = #{leo,andrea},ocupantes= #{leo,andrea}) 
		
		//un dormitorio con andrea como ocupante cuyos duenios leo y andrea
		var dormitorioMatrimonialOcupadoConAndrea=new Dormitorio(duenios = #{leo,andrea},ocupantes=#{andrea}) 
		
		//un dormitorio con andrea como ocupante, cuya duenia es milena
		var dormitorioMilenaOcupadoConAndrea=new Dormitorio(duenios =#{milena},ocupantes=#{andrea})  

		//una cocina con andrea como ocupante, 10 de superficie
		var cocinaOcupadaConAndrea =new Cocina(m2 = 10,ocupantes=#{andrea})

		//una cocina con leo como ocupante, 10 de superficie
		var cocinaOcupadaConLeo =new Cocina(m2 = 10,ocupantes=#{leo})
		
//***********OBJETOS TEST PUNTO 3****************/


	//una casa que tiene 4 habitaciones: banioPrincipal , dormitorioMatrimonial, cocinaPlantaBaja, comedor
	var casaFlia

	//Una familia cuyos miembros son leo, andrea y milena. La casa es: casaFlia.	
	//Recordar que Leo es sencillo, Andrea obsesiva y Milena golosa
	var familia		
	
	fixture{
		leo.adueniarHabitacion(dormitorioMatrimonial)
		andrea.adueniarHabitacion(dormitorioMatrimonial)
		leo.adueniarHabitacion(dormitorioMatrimonialOcupadoConAndrea)
		
		
	}
	

//************TESTS PUNTO 1************

	test "confort uso general" {
		
		
		assert.equals(10, comedor.aporteConfort(leo))
		assert.equals(10, comedor.aporteConfort(milena))
		assert.equals(10, comedor.aporteConfort(andrea) )
		
	}
//	
	test "confort banio" {
		assert.equals(14,banioPrincipal.aporteConfort(leo))	
		assert.equals(14,banioPrincipal.aporteConfort(andrea))		
		assert.equals(12,banioPrincipal.aporteConfort(milena))		
	}

	test "confort dormitorio" {
		assert.equals(15, dormitorioMatrimonial.aporteConfort(leo))		
		assert.equals(15, dormitorioMatrimonial.aporteConfort(andrea))		
			assert.equals(10, dormitorioMatrimonial.aporteConfort(milena))		
	}

	test "confort cocina" {
		assert.equals(10, cocinaPlantaBaja.aporteConfort(leo))		
		assert.equals(11, cocinaPlantaBaja.aporteConfort(andrea))		
		assert.equals(10, cocinaPlantaBaja.aporteConfort(milena))		
	
		
//		//TODO! reconfigurar para que el porcentaje de la superficie
//		//usado para puntos extras sea un 20%
		
		extraCocina.cambiarPorcentaje(20)
		assert.equals(12,cocinaPlantaBaja.aporteConfort(andrea))		
//
}
	
	

//************TESTS PUNTO 2.1************
	
	test "puede entrar habitaciones vacias" {
		
		assert.that(comedor.puedeEntrar(leo))
		assert.that(dormitorioMatrimonial.puedeEntrar(leo))
		assert.that(banioPrincipal.puedeEntrar(leo))
		assert.that(cocinaPlantaBaja.puedeEntrar(leo))
	}
	
//	
//		
	test "puede entrar banio ocupado" {
		assert.that(banioConMenor.puedeEntrar(leo)) 
		assert.notThat(banioConMayor.puedeEntrar(leo))	
	}
//	
	test "puede entrar dormitorio" {
//		
		assert.that(dormitorioMatrimonialOcupadoConAndrea.puedeEntrar(leo)) //es duenio
		assert.notThat(dormitorioMatrimonialOcupadoConAndrea.puedeEntrar(milena)) //faltan duenios
		assert.that(dormitorioMatrimonialOcupado.puedeEntrar(milena)) //estan los duenios
//		
	}
//
	test "puede entrar cocina con alguien que sabe cocinar" {
		assert.that(cocinaOcupadaConAndrea.puedeEntrar(leo)) 
//		
		//HACER QUE leo adquiera habilidades de cocina 
		leo.aprenderCocina()
		assert.notThat(cocinaOcupadaConAndrea.puedeEntrar(leo))	
	}
//
	test "puede entrar cocina con alguien que no sabe cocinar" {
		assert.that(cocinaOcupadaConLeo.puedeEntrar(andrea))
		assert.that(cocinaOcupadaConLeo.puedeEntrar(milena))
	}
	
	
//Test punto 2.2 y 2.3

	test "andrea y milena entrando y saliendo de cuartos" {
//			
//		// HACER que milena entre a banioPrincipal
		milena.entrarA(banioPrincipal)
		assert.equals(banioPrincipal, milena.estaEn())
//
//		// HACER que andrea entre a dormitorioMatrimonial
		andrea.entrarA(dormitorioMatrimonial)		
		assert.equals(dormitorioMatrimonial, andrea.estaEn())
//		
//		
// 		//HACER que milena entre al dormitorio principal, cosa que no puede porque no es dueña
		assert.throwsException({milena.entrarA(dormitorioMatrimonial)})		
		assert.equals(banioPrincipal, milena.estaEn())
//		
//		
//		// HACER que andrea entre a banioPrincipal		
		andrea.entrarA(dormitorioMatrimonial)
		assert.equals(banioPrincipal, andrea.estaEn())
//		
 		assert.notThat(dormitorioMatrimonial.estaEnlaHabitacion(andrea) )		
//		
//	} 

//************Test punto 3*************
	
//	test "habitaciones ocupadas, personas responsables, confort promedio y familia a gusto" {
//		//HACER que leo entre a dormitorioMatrimonial
//		//HACER que andrea entre a cocinaPlantaBaja 
//		
//		//punto 3.1
//		assert.equals(#{dormitorioMatrimonial,cocinaPlantaBaja}, /* habitaciones ocupadas de casaFlia*/)		
//		//punto 3.2
//		assert.equals(#{leo,andrea}, /* responsables de casaFlia*/)	
//		//punto 3.3
//		assert.equals(47, /* confort promedio de familia*/)	
//		//punto 3.4
//		assert.that(/* si familia esta a gusto*/)
//	}
 

}

}

